{"ast":null,"code":"import{createContext,useEffect,useReducer}from\"react\";import{jsx as _jsx}from\"react/jsx-runtime\";const INITIAL_STATE={user:JSON.parse(localStorage.getItem(\"user\"))||null,loading:false,error:null};export const AuthContext=/*#__PURE__*/createContext(INITIAL_STATE);const AuthReducer=(state,action)=>{switch(action.type){case\"LOGIN_START\":return{user:null,loading:true,error:null};case\"LOGIN_SUCCESS\":return{user:action.payload,loading:false,error:null};case\"LOGIN_FAILURE\":return{user:null,loading:false,error:action.payload};case\"LOGOUT\":return{user:null,loading:false,error:null};default:return state;}};export const AuthContextProvider=_ref=>{let{children}=_ref;const[state,dispatch]=useReducer(AuthReducer,INITIAL_STATE);// The AuthContextProvider is a React component that \n// uses the useReducer hook to manage the \n// authentication state based on the AuthReducer function.\n// useReducer initializes the state with INITIAL_STATE and\n//  returns the current state and \n// the dispatch function to send actions to the reducer.\nuseEffect(()=>{localStorage.setItem(\"user\",JSON.stringify(state.user));},[state.user]);const logout=()=>{dispatch({type:\"LOGOUT\"});};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:{user:state.user,loading:state.loading,error:state.error,dispatch,logout},children:children});};// How It Works\n// Initialization: When the application initializes, AuthContextProvider sets up the authentication state using useReducer. The initial state includes any user data stored in localStorage.\n// State Management: The AuthReducer function manages changes to the authentication state based on dispatched actions (e.g., login start, login success, login failure, and logout).\n// Local Storage: The useEffect hook ensures that any changes to the user state are reflected in localStorage, allowing the user session to persist across page reloads.\n// Logout Functionality: The logout function dispatches a LOGOUT action, which clears the user from the state and localStorage.\n// Context Provider: The AuthContext.Provider component makes the authentication state and functions available to any component that consumes the AuthContext.\n// By using this setup, any component within the AuthContextProvider can access the authentication state and dispatch actions to update it, allowing for a consistent and centralized authentication system.","map":{"version":3,"names":["createContext","useEffect","useReducer","jsx","_jsx","INITIAL_STATE","user","JSON","parse","localStorage","getItem","loading","error","AuthContext","AuthReducer","state","action","type","payload","AuthContextProvider","_ref","children","dispatch","setItem","stringify","logout","Provider","value"],"sources":["C:/Users/NIDHI/Desktop/WebSite Booking/frontend/src/context/AuthContext.js"],"sourcesContent":["import { createContext, useEffect, useReducer } from \"react\";\n\nconst INITIAL_STATE = {\n  user: JSON.parse(localStorage.getItem(\"user\")) || null,\n  loading: false,\n  error: null,\n};\n\nexport const AuthContext = createContext(INITIAL_STATE);\n\nconst AuthReducer = (state, action) => {\n  switch (action.type) {\n    case \"LOGIN_START\":\n      return {\n        user: null,\n        loading: true,\n        error: null,\n      };\n    case \"LOGIN_SUCCESS\":\n      return {\n        user: action.payload,\n        loading: false,\n        error: null,\n      };\n    case \"LOGIN_FAILURE\":\n      return {\n        user: null,\n        loading: false,\n        error: action.payload,\n      };\n    case \"LOGOUT\":\n      return {\n        user: null,\n        loading: false,\n        error: null,\n      };\n    default:\n      return state;\n  }\n};\n\nexport const AuthContextProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(AuthReducer, INITIAL_STATE);\n  // The AuthContextProvider is a React component that \n  // uses the useReducer hook to manage the \n  // authentication state based on the AuthReducer function.\n  // useReducer initializes the state with INITIAL_STATE and\n  //  returns the current state and \n  // the dispatch function to send actions to the reducer.\n  useEffect(() => {\n    localStorage.setItem(\"user\", JSON.stringify(state.user));\n  }, [state.user]);\n\n  const logout = () => {\n    dispatch({ type: \"LOGOUT\" });\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user: state.user,\n        loading: state.loading,\n        error: state.error,\n        dispatch,\n        logout,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};\n// How It Works\n// Initialization: When the application initializes, AuthContextProvider sets up the authentication state using useReducer. The initial state includes any user data stored in localStorage.\n\n// State Management: The AuthReducer function manages changes to the authentication state based on dispatched actions (e.g., login start, login success, login failure, and logout).\n\n// Local Storage: The useEffect hook ensures that any changes to the user state are reflected in localStorage, allowing the user session to persist across page reloads.\n\n// Logout Functionality: The logout function dispatches a LOGOUT action, which clears the user from the state and localStorage.\n\n// Context Provider: The AuthContext.Provider component makes the authentication state and functions available to any component that consumes the AuthContext.\n\n// By using this setup, any component within the AuthContextProvider can access the authentication state and dispatch actions to update it, allowing for a consistent and centralized authentication system."],"mappings":"AAAA,OAASA,aAAa,CAAEC,SAAS,CAAEC,UAAU,KAAQ,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAE7D,KAAM,CAAAC,aAAa,CAAG,CACpBC,IAAI,CAAEC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC,EAAI,IAAI,CACtDC,OAAO,CAAE,KAAK,CACdC,KAAK,CAAE,IACT,CAAC,CAED,MAAO,MAAM,CAAAC,WAAW,cAAGb,aAAa,CAACK,aAAa,CAAC,CAEvD,KAAM,CAAAS,WAAW,CAAGA,CAACC,KAAK,CAAEC,MAAM,GAAK,CACrC,OAAQA,MAAM,CAACC,IAAI,EACjB,IAAK,aAAa,CAChB,MAAO,CACLX,IAAI,CAAE,IAAI,CACVK,OAAO,CAAE,IAAI,CACbC,KAAK,CAAE,IACT,CAAC,CACH,IAAK,eAAe,CAClB,MAAO,CACLN,IAAI,CAAEU,MAAM,CAACE,OAAO,CACpBP,OAAO,CAAE,KAAK,CACdC,KAAK,CAAE,IACT,CAAC,CACH,IAAK,eAAe,CAClB,MAAO,CACLN,IAAI,CAAE,IAAI,CACVK,OAAO,CAAE,KAAK,CACdC,KAAK,CAAEI,MAAM,CAACE,OAChB,CAAC,CACH,IAAK,QAAQ,CACX,MAAO,CACLZ,IAAI,CAAE,IAAI,CACVK,OAAO,CAAE,KAAK,CACdC,KAAK,CAAE,IACT,CAAC,CACH,QACE,MAAO,CAAAG,KAAK,CAChB,CACF,CAAC,CAED,MAAO,MAAM,CAAAI,mBAAmB,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CAC9C,KAAM,CAACL,KAAK,CAAEO,QAAQ,CAAC,CAAGpB,UAAU,CAACY,WAAW,CAAET,aAAa,CAAC,CAChE;AACA;AACA;AACA;AACA;AACA;AACAJ,SAAS,CAAC,IAAM,CACdQ,YAAY,CAACc,OAAO,CAAC,MAAM,CAAEhB,IAAI,CAACiB,SAAS,CAACT,KAAK,CAACT,IAAI,CAAC,CAAC,CAC1D,CAAC,CAAE,CAACS,KAAK,CAACT,IAAI,CAAC,CAAC,CAEhB,KAAM,CAAAmB,MAAM,CAAGA,CAAA,GAAM,CACnBH,QAAQ,CAAC,CAAEL,IAAI,CAAE,QAAS,CAAC,CAAC,CAC9B,CAAC,CAED,mBACEb,IAAA,CAACS,WAAW,CAACa,QAAQ,EACnBC,KAAK,CAAE,CACLrB,IAAI,CAAES,KAAK,CAACT,IAAI,CAChBK,OAAO,CAAEI,KAAK,CAACJ,OAAO,CACtBC,KAAK,CAAEG,KAAK,CAACH,KAAK,CAClBU,QAAQ,CACRG,MACF,CAAE,CAAAJ,QAAA,CAEDA,QAAQ,CACW,CAAC,CAE3B,CAAC,CACD;AACA;AAEA;AAEA;AAEA;AAEA;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}