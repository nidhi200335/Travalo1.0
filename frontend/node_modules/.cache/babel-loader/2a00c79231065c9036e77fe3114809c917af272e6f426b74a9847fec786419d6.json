{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\NIDHI\\\\Desktop\\\\WebSite Booking\\\\frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$();\nimport { createContext, useEffect, useReducer } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst INITIAL_STATE = {\n  user: JSON.parse(localStorage.getItem(\"user\")) || null,\n  loading: false,\n  error: null\n};\nexport const AuthContext = /*#__PURE__*/createContext(INITIAL_STATE);\n_c = AuthContext;\nconst AuthReducer = (state, action) => {\n  switch (action.type) {\n    case \"LOGIN_START\":\n      return {\n        user: null,\n        loading: true,\n        error: null\n      };\n    case \"LOGIN_SUCCESS\":\n      return {\n        user: action.payload,\n        loading: false,\n        error: null\n      };\n    case \"LOGIN_FAILURE\":\n      return {\n        user: null,\n        loading: false,\n        error: action.payload\n      };\n    case \"LOGOUT\":\n      return {\n        user: null,\n        loading: false,\n        error: null\n      };\n    default:\n      return state;\n  }\n};\n_c2 = AuthReducer;\nexport const AuthContextProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(AuthReducer, INITIAL_STATE);\n  // The AuthContextProvider is a React component that \n  // uses the useReducer hook to manage the \n  // authentication state based on the AuthReducer function.\n  // useReducer initializes the state with INITIAL_STATE and\n  //  returns the current state and \n  // the dispatch function to send actions to the reducer.\n  useEffect(() => {\n    localStorage.setItem(\"user\", JSON.stringify(state.user));\n  }, [state.user]);\n  const logout = () => {\n    dispatch({\n      type: \"LOGOUT\"\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user: state.user,\n      loading: state.loading,\n      error: state.error,\n      dispatch,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n// How It Works\n// Initialization: When the application initializes, AuthContextProvider sets up the authentication state using useReducer. The initial state includes any user data stored in localStorage.\n\n// State Management: The AuthReducer function manages changes to the authentication state based on dispatched actions (e.g., login start, login success, login failure, and logout).\n\n// Local Storage: The useEffect hook ensures that any changes to the user state are reflected in localStorage, allowing the user session to persist across page reloads.\n\n// Logout Functionality: The logout function dispatches a LOGOUT action, which clears the user from the state and localStorage.\n\n// Context Provider: The AuthContext.Provider component makes the authentication state and functions available to any component that consumes the AuthContext.\n\n// By using this setup, any component within the AuthContextProvider can access the authentication state and dispatch actions to update it, allowing for a consistent and centralized authentication system.\n_s(AuthContextProvider, \"zpn/kx5Q6O+5t2dWmjRtda+kHzA=\");\n_c3 = AuthContextProvider;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"AuthContext\");\n$RefreshReg$(_c2, \"AuthReducer\");\n$RefreshReg$(_c3, \"AuthContextProvider\");","map":{"version":3,"names":["createContext","useEffect","useReducer","jsxDEV","_jsxDEV","INITIAL_STATE","user","JSON","parse","localStorage","getItem","loading","error","AuthContext","_c","AuthReducer","state","action","type","payload","_c2","AuthContextProvider","children","_s","dispatch","setItem","stringify","logout","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c3","$RefreshReg$"],"sources":["C:/Users/NIDHI/Desktop/WebSite Booking/frontend/src/context/AuthContext.js"],"sourcesContent":["import { createContext, useEffect, useReducer } from \"react\";\n\nconst INITIAL_STATE = {\n  user: JSON.parse(localStorage.getItem(\"user\")) || null,\n  loading: false,\n  error: null,\n};\n\nexport const AuthContext = createContext(INITIAL_STATE);\n\nconst AuthReducer = (state, action) => {\n  switch (action.type) {\n    case \"LOGIN_START\":\n      return {\n        user: null,\n        loading: true,\n        error: null,\n      };\n    case \"LOGIN_SUCCESS\":\n      return {\n        user: action.payload,\n        loading: false,\n        error: null,\n      };\n    case \"LOGIN_FAILURE\":\n      return {\n        user: null,\n        loading: false,\n        error: action.payload,\n      };\n    case \"LOGOUT\":\n      return {\n        user: null,\n        loading: false,\n        error: null,\n      };\n    default:\n      return state;\n  }\n};\n\nexport const AuthContextProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(AuthReducer, INITIAL_STATE);\n  // The AuthContextProvider is a React component that \n  // uses the useReducer hook to manage the \n  // authentication state based on the AuthReducer function.\n  // useReducer initializes the state with INITIAL_STATE and\n  //  returns the current state and \n  // the dispatch function to send actions to the reducer.\n  useEffect(() => {\n    localStorage.setItem(\"user\", JSON.stringify(state.user));\n  }, [state.user]);\n\n  const logout = () => {\n    dispatch({ type: \"LOGOUT\" });\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user: state.user,\n        loading: state.loading,\n        error: state.error,\n        dispatch,\n        logout,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};\n// How It Works\n// Initialization: When the application initializes, AuthContextProvider sets up the authentication state using useReducer. The initial state includes any user data stored in localStorage.\n\n// State Management: The AuthReducer function manages changes to the authentication state based on dispatched actions (e.g., login start, login success, login failure, and logout).\n\n// Local Storage: The useEffect hook ensures that any changes to the user state are reflected in localStorage, allowing the user session to persist across page reloads.\n\n// Logout Functionality: The logout function dispatches a LOGOUT action, which clears the user from the state and localStorage.\n\n// Context Provider: The AuthContext.Provider component makes the authentication state and functions available to any component that consumes the AuthContext.\n\n// By using this setup, any component within the AuthContextProvider can access the authentication state and dispatch actions to update it, allowing for a consistent and centralized authentication system."],"mappings":";;AAAA,SAASA,aAAa,EAAEC,SAAS,EAAEC,UAAU,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7D,MAAMC,aAAa,GAAG;EACpBC,IAAI,EAAEC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,IAAI;EACtDC,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE;AACT,CAAC;AAED,OAAO,MAAMC,WAAW,gBAAGb,aAAa,CAACK,aAAa,CAAC;AAACS,EAAA,GAA3CD,WAAW;AAExB,MAAME,WAAW,GAAGA,CAACC,KAAK,EAAEC,MAAM,KAAK;EACrC,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAK,aAAa;MAChB,OAAO;QACLZ,IAAI,EAAE,IAAI;QACVK,OAAO,EAAE,IAAI;QACbC,KAAK,EAAE;MACT,CAAC;IACH,KAAK,eAAe;MAClB,OAAO;QACLN,IAAI,EAAEW,MAAM,CAACE,OAAO;QACpBR,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE;MACT,CAAC;IACH,KAAK,eAAe;MAClB,OAAO;QACLN,IAAI,EAAE,IAAI;QACVK,OAAO,EAAE,KAAK;QACdC,KAAK,EAAEK,MAAM,CAACE;MAChB,CAAC;IACH,KAAK,QAAQ;MACX,OAAO;QACLb,IAAI,EAAE,IAAI;QACVK,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE;MACT,CAAC;IACH;MACE,OAAOI,KAAK;EAChB;AACF,CAAC;AAACI,GAAA,GA7BIL,WAAW;AA+BjB,OAAO,MAAMM,mBAAmB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACnD,MAAM,CAACP,KAAK,EAAEQ,QAAQ,CAAC,GAAGtB,UAAU,CAACa,WAAW,EAAEV,aAAa,CAAC;EAChE;EACA;EACA;EACA;EACA;EACA;EACAJ,SAAS,CAAC,MAAM;IACdQ,YAAY,CAACgB,OAAO,CAAC,MAAM,EAAElB,IAAI,CAACmB,SAAS,CAACV,KAAK,CAACV,IAAI,CAAC,CAAC;EAC1D,CAAC,EAAE,CAACU,KAAK,CAACV,IAAI,CAAC,CAAC;EAEhB,MAAMqB,MAAM,GAAGA,CAAA,KAAM;IACnBH,QAAQ,CAAC;MAAEN,IAAI,EAAE;IAAS,CAAC,CAAC;EAC9B,CAAC;EAED,oBACEd,OAAA,CAACS,WAAW,CAACe,QAAQ;IACnBC,KAAK,EAAE;MACLvB,IAAI,EAAEU,KAAK,CAACV,IAAI;MAChBK,OAAO,EAAEK,KAAK,CAACL,OAAO;MACtBC,KAAK,EAAEI,KAAK,CAACJ,KAAK;MAClBY,QAAQ;MACRG;IACF,CAAE;IAAAL,QAAA,EAEDA;EAAQ;IAAAQ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AACD;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AAAAV,EAAA,CAzCaF,mBAAmB;AAAAa,GAAA,GAAnBb,mBAAmB;AAAA,IAAAP,EAAA,EAAAM,GAAA,EAAAc,GAAA;AAAAC,YAAA,CAAArB,EAAA;AAAAqB,YAAA,CAAAf,GAAA;AAAAe,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}