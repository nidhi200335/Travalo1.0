{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\NIDHI\\\\Desktop\\\\WebSite Booking\\\\frontend\\\\src\\\\context\\\\SearchContext.js\",\n  _s = $RefreshSig$();\nimport { createContext, useReducer } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst INITIAL_STATE = {\n  city: undefined,\n  dates: [],\n  options: {\n    adult: undefined,\n    children: undefined,\n    room: undefined\n  }\n};\nexport const SearchContext = /*#__PURE__*/createContext(INITIAL_STATE);\n_c = SearchContext;\nconst SearchReducer = (state, action) => {\n  switch (action.type) {\n    case \"NEW_SEARCH\":\n      return action.payload;\n    case \"RESET_SEARCH\":\n      return INITIAL_STATE;\n    default:\n      return state;\n  }\n};\n// SearchReducer: This is a reducer function that takes the current state and an action, and returns a new state based on the action type.\n// If the action type is \"NEW_SEARCH\", it returns the payload of the action, which should be the new search state.\n// If the action type is \"RESET_SEARCH\", it returns the initial state, effectively resetting the search state.\n// The default case returns the current state if the action type is not recognized.\n_c2 = SearchReducer;\nexport const SearchContextProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(SearchReducer, INITIAL_STATE);\n\n  //   useReducer Hook:\n  // This hook takes the reducer function (SearchReducer) and the initial state (INITIAL_STATE) as arguments.\n  // It returns the current state (state) and a dispatch function (dispatch) to send actions to the reducer.\n  // Providing State and Dispatch:\n  // The provider component (SearchContext.Provider) wraps its children, making the state and dispatch function available to any ne\n  //sted components that need them.\n  // The value prop of SearchContext.Provider includes the current state properties (city, dates, options) and the dispatch function.\n  return /*#__PURE__*/_jsxDEV(SearchContext.Provider, {\n    value: {\n      city: state.city,\n      dates: state.dates,\n      options: state.options,\n      dispatch\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_s(SearchContextProvider, \"ih+Vd9fHXqjzC8XFlo5K5uS4lm8=\");\n_c3 = SearchContextProvider;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"SearchContext\");\n$RefreshReg$(_c2, \"SearchReducer\");\n$RefreshReg$(_c3, \"SearchContextProvider\");","map":{"version":3,"names":["createContext","useReducer","jsxDEV","_jsxDEV","INITIAL_STATE","city","undefined","dates","options","adult","children","room","SearchContext","_c","SearchReducer","state","action","type","payload","_c2","SearchContextProvider","_s","dispatch","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c3","$RefreshReg$"],"sources":["C:/Users/NIDHI/Desktop/WebSite Booking/frontend/src/context/SearchContext.js"],"sourcesContent":["import { createContext, useReducer } from \"react\";\n\nconst INITIAL_STATE = {\n  city: undefined,\n  dates: [],\n  options: {\n    adult: undefined,\n    children: undefined,\n    room: undefined,\n  },\n};\n\nexport const SearchContext = createContext(INITIAL_STATE);\n\nconst SearchReducer = (state, action) => {\n  switch (action.type) {\n    case \"NEW_SEARCH\":\n      return action.payload;\n    case \"RESET_SEARCH\":\n      return INITIAL_STATE;\n    default:\n      return state;\n  }\n};\n// SearchReducer: This is a reducer function that takes the current state and an action, and returns a new state based on the action type.\n// If the action type is \"NEW_SEARCH\", it returns the payload of the action, which should be the new search state.\n// If the action type is \"RESET_SEARCH\", it returns the initial state, effectively resetting the search state.\n// The default case returns the current state if the action type is not recognized.\nexport const SearchContextProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(SearchReducer, INITIAL_STATE);\n\n//   useReducer Hook:\n// This hook takes the reducer function (SearchReducer) and the initial state (INITIAL_STATE) as arguments.\n// It returns the current state (state) and a dispatch function (dispatch) to send actions to the reducer.\n// Providing State and Dispatch:\n// The provider component (SearchContext.Provider) wraps its children, making the state and dispatch function available to any ne\n//sted components that need them.\n// The value prop of SearchContext.Provider includes the current state properties (city, dates, options) and the dispatch function.\n  return (\n    <SearchContext.Provider\n      value={{\n        city: state.city,\n        dates: state.dates,\n        options: state.options,\n        dispatch,\n      }}\n    >\n      {children}\n    </SearchContext.Provider>\n  );\n};"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,UAAU,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,MAAMC,aAAa,GAAG;EACpBC,IAAI,EAAEC,SAAS;EACfC,KAAK,EAAE,EAAE;EACTC,OAAO,EAAE;IACPC,KAAK,EAAEH,SAAS;IAChBI,QAAQ,EAAEJ,SAAS;IACnBK,IAAI,EAAEL;EACR;AACF,CAAC;AAED,OAAO,MAAMM,aAAa,gBAAGZ,aAAa,CAACI,aAAa,CAAC;AAACS,EAAA,GAA7CD,aAAa;AAE1B,MAAME,aAAa,GAAGA,CAACC,KAAK,EAAEC,MAAM,KAAK;EACvC,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAK,YAAY;MACf,OAAOD,MAAM,CAACE,OAAO;IACvB,KAAK,cAAc;MACjB,OAAOd,aAAa;IACtB;MACE,OAAOW,KAAK;EAChB;AACF,CAAC;AACD;AACA;AACA;AACA;AAAAI,GAAA,GAbML,aAAa;AAcnB,OAAO,MAAMM,qBAAqB,GAAGA,CAAC;EAAEV;AAAS,CAAC,KAAK;EAAAW,EAAA;EACrD,MAAM,CAACN,KAAK,EAAEO,QAAQ,CAAC,GAAGrB,UAAU,CAACa,aAAa,EAAEV,aAAa,CAAC;;EAEpE;EACA;EACA;EACA;EACA;EACA;EACA;EACE,oBACED,OAAA,CAACS,aAAa,CAACW,QAAQ;IACrBC,KAAK,EAAE;MACLnB,IAAI,EAAEU,KAAK,CAACV,IAAI;MAChBE,KAAK,EAAEQ,KAAK,CAACR,KAAK;MAClBC,OAAO,EAAEO,KAAK,CAACP,OAAO;MACtBc;IACF,CAAE;IAAAZ,QAAA,EAEDA;EAAQ;IAAAe,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACa,CAAC;AAE7B,CAAC;AAACP,EAAA,CAtBWD,qBAAqB;AAAAS,GAAA,GAArBT,qBAAqB;AAAA,IAAAP,EAAA,EAAAM,GAAA,EAAAU,GAAA;AAAAC,YAAA,CAAAjB,EAAA;AAAAiB,YAAA,CAAAX,GAAA;AAAAW,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}